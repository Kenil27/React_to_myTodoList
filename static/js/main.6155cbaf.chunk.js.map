{"version":3,"sources":["component/child.js","component/form.js","App.js","serviceWorker.js","index.js"],"names":["initialNotes","title","checked","todo","state","pushItem","notes","today","Date","toLocaleDateString","onKeyPress","event","key","_this","push","target","value","setState","saveNotesToStorage","toggleNote","removeItem","index","e","splice","console","log","isFirstVisitedJSON","localStorage","getItem","JSON","parse","str","parsedArr","this","setItem","stringify","_this2","react_default","a","createElement","className","type","placeholder","map","onChange","onClick","bind","Component","Form","imgfile","image","name","onFileChanged","files","URL","createObjectURL","inputName","onFormSubmit","alert","preventDefault","onSubmit","htmlFor","id","src","alt","App","BrowserRouter","NavLink","activeStyle","color","exact","to","Route_default","path","component","strict","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAEMA,SAAe,CACnB,CAAEC,MAAO,mBAAoBC,SAAS,GACtC,CAAED,MAAO,oBAAqBC,SAAS,KAqF1BC,6MAjFbC,MAAQ,CACNC,SAAW,GACXC,MAAO,GACPC,OAAO,IAAIC,MAAOC,wBAqBpBC,WAAa,SAAAC,GACO,UAAdA,EAAMC,MACRC,EAAKT,MAAME,MAAMQ,KAAK,CAAEb,MAAOU,EAAMI,OAAOC,MAAQd,SAAS,IAC7DW,EAAKI,SAAS,CACVZ,SAAW,KAEfQ,EAAKK,qBACLP,EAAMI,OAAOC,MAAQ,OAGzBG,WAAa,SAACR,GAEZE,EAAKK,wBAEPE,WAAa,SAACC,EAAOC,GACjBT,EAAKT,MAAME,MAAMiB,OAAOF,EAAO,GAC/BR,EAAKI,SAAS,CAACX,MAAOO,EAAKT,MAAME,QACjCO,EAAKK,yGAnCPM,QAAQC,IAAI,qBACZ,IAAMC,EAAqBC,aAAaC,QAAQ,kBAGhD,GAFuBC,KAAKC,MAAMJ,GAEd,CAClB,IAAMK,EAAMJ,aAAaC,QAAQ,UAC7BI,EAAYH,KAAKC,MAAMC,GAC3BE,KAAKhB,SAAS,CACZX,MAAQ0B,SAIVC,KAAKhB,SAAS,CACZX,MAAQN,IAEV2B,aAAaO,QAAQ,iBAAkB,qDAuBzCP,aAAaO,QAAQ,SAAUL,KAAKM,UAAUF,KAAK7B,MAAME,yCAGlD,IAAA8B,EAAAH,KACP,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,YAAY,oBACZF,UAAU,OACV9B,WAAYuB,KAAKvB,cAIrB2B,EAAAC,EAAAC,cAAA,yCAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEVP,KAAK7B,MAAME,MAAMqC,IAAI,SAACxC,EAAMkB,GAC3B,OACEgB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACfH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWG,SAAUR,EAAKjB,WAAYH,MAAOb,EAAKD,UAC9DmC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAK3B,IAAKT,EAAKkB,OAAQlB,EAAKF,OAC5BoC,EAAAC,EAAAC,cAAA,UAAQM,QAAST,EAAKhB,WAAW0B,KAAKV,EAAKf,GAAQmB,UAAU,SAA7D,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQJ,EAAKhC,MAAMG,mBAzElCwC,aC0DFC,6MA7Db5C,MAAQ,CACN6C,QAAS,KACTC,MAAO,GACPC,KAAM,MAGRC,cAAgB,SAAAzC,GACdE,EAAKI,SAAS,CACZgC,QAAStC,EAAMI,OAAOsC,MAAM,KAE1B1C,EAAMI,OAAOsC,OAAS1C,EAAMI,OAAOsC,MAAM,IAC3CxC,EAAKI,SAAS,CACZiC,MAAOI,IAAIC,gBAAgB5C,EAAMI,OAAOsC,MAAM,SAKpDG,UAAY,SAAA7C,GACVE,EAAKI,SAAS,CACZkC,KAAMxC,EAAMI,OAAOC,WAIvByC,aAAe,SAAA9C,GACb+C,MAAM,2BAA6B7C,EAAKT,MAAM+C,MAC9CxC,EAAMgD,0FAIN,OACItB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMqB,SAAU3B,KAAKwB,cACnBpB,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,WAAf,6BACAxB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLqB,GAAG,UACHX,KAAK,UACLP,SAAUX,KAAKmB,iBAGnBf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,SAASC,IAAK9B,KAAK7B,MAAM8C,MAAOc,IAAI,MAE9C3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,QAAf,SAEExB,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLzB,MAAOiB,KAAK7B,MAAM+C,KAClBP,SAAUX,KAAKuB,cAIrBnB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASzB,MAAM,oBAvDtB+B,aC0BJkB,mLAjBX,OACE5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAASC,YAAa,CAACC,MAAO,SAAUC,OAAK,EAACC,GAAG,SAAjD,SACJlC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAASC,YAAa,CAACC,MAAO,SAAUC,OAAK,EAACC,GAAG,SAAjD,cAGNlC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAOmC,KAAK,QAAQH,OAAK,EAACI,UAAW1B,IACrCX,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAOmC,KAAK,QAAQH,OAAK,EAACK,QAAM,EAACD,UAAWvE,aAZpC4C,aCIE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6155cbaf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './style.css'\r\nconst initialNotes = [\r\n  { title: \"Learn JavaScript\", checked: false },\r\n  { title: \"Make a To-do List\", checked: true }\r\n];\r\nclass todo extends Component {\r\n  \r\n  state = {\r\n    pushItem : '',\r\n    notes: [],\r\n    today: new Date().toLocaleDateString()\r\n  };\r\n  componentDidMount(){\r\n    console.log('componentDidMount')\r\n    const isFirstVisitedJSON = localStorage.getItem(\"isFirstVisited\");\r\n    const isFirstVisited = JSON.parse(isFirstVisitedJSON);\r\n\r\n    if (isFirstVisited) {\r\n      const str = localStorage.getItem(\"myTodo\");\r\n      var parsedArr = JSON.parse(str);\r\n      this.setState({\r\n        notes : parsedArr\r\n      })\r\n      \r\n    } else {\r\n      this.setState({\r\n        notes : initialNotes\r\n      })\r\n      localStorage.setItem(\"isFirstVisited\", \"true\");\r\n    }\r\n  }\r\n  onKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      this.state.notes.push({ title: event.target.value , checked: false });\r\n      this.setState({\r\n          pushItem : ''\r\n      })\r\n      this.saveNotesToStorage();\r\n      event.target.value = \"\";\r\n    }\r\n  };\r\n  toggleNote = (event) => {\r\n    //const value = event.target.checked\r\n    this.saveNotesToStorage();\r\n  }\r\n  removeItem = (index, e) => {\r\n      this.state.notes.splice(index, 1);\r\n      this.setState({notes: this.state.notes})\r\n      this.saveNotesToStorage();\r\n  }\r\n  saveNotesToStorage() {\r\n    localStorage.setItem(\"myTodo\", JSON.stringify(this.state.notes));\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"header\">My Todo List</h1>\r\n        <div className=\"todo\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"+  Add a to-do...\"\r\n            className=\"list\"\r\n            onKeyPress={this.onKeyPress}\r\n          />\r\n        </div>\r\n        \r\n        <h4>Data Stored in localStorage</h4>\r\n        \r\n        <div className=\"all-todos\">\r\n          \r\n            {this.state.notes.map((todo, index) => {\r\n              return (\r\n                <label className=\"list-item\">\r\n                  <input type=\"checkbox\" onChange={this.toggleNote} value={todo.checked}/>\r\n                  <span className=\"checkmark\"></span>\r\n                  <div key={todo.index}>{todo.title}</div>\r\n                  <button onClick={this.removeItem.bind(this,index)} className=\"close\">x</button>\r\n                  <span className=\"date\">{this.state.today}</span>\r\n                </label>\r\n              );\r\n            })}\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default todo;\r\n","import React , {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n      imgfile: null,\r\n      image: \"\",\r\n      name: \"\"\r\n    };\r\n  \r\n    onFileChanged = event => {\r\n      this.setState({\r\n        imgfile: event.target.files[0]\r\n      });\r\n      if (event.target.files && event.target.files[0]) {\r\n        this.setState({\r\n          image: URL.createObjectURL(event.target.files[0])\r\n        });\r\n      }\r\n    };\r\n  \r\n    inputName = event => {\r\n      this.setState({\r\n        name: event.target.value\r\n      });\r\n    };\r\n  \r\n    onFormSubmit = event => {\r\n      alert(\"Form was submitted by : \" + this.state.name);\r\n      event.preventDefault();\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n          <div>\r\n            <form onSubmit={this.onFormSubmit}>\r\n              <label htmlFor=\"imgfile\">Choose an image to upload</label>\r\n              <div>\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"imgfile\"\r\n                  name=\"imgfile\"\r\n                  onChange={this.onFileChanged}\r\n                />\r\n              </div>\r\n              <div>\r\n                <img id=\"target\" src={this.state.image} alt=\"\" />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"name\">\r\n                  Name :\r\n                  <input\r\n                    type=\"text\"\r\n                    value={this.state.name}\r\n                    onChange={this.inputName}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Form;","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport { BrowserRouter as Router, NavLink } from \"react-router-dom\";\nimport Route from \"react-router-dom/Route\";\nimport todo from './component/child';\nimport Form from './component/form'\n\nclass App extends Component {\n \n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <ul>\n            <li><NavLink activeStyle={{color: 'green'}} exact to=\"/form\">Form</NavLink></li>\n            <li><NavLink activeStyle={{color: 'green'}} exact to=\"/todo\">toDoList</NavLink></li>\n          </ul>\n\n          <Route path=\"/form\" exact component={Form} />\n          <Route path=\"/todo\" exact strict component={todo} />\n\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}