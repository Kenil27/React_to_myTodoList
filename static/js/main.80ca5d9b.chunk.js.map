{"version":3,"sources":["component/child.js","component/form.js","App.js","serviceWorker.js","index.js"],"names":["Child","props","react_default","a","createElement","Form","state","imgfile","image","name","onFileChanged","event","_this","setState","target","files","URL","createObjectURL","inputName","value","onFormSubmit","alert","preventDefault","onSubmit","this","htmlFor","type","id","onChange","src","alt","Component","App","BrowserRouter","className","Link","to","Route_default","path","exact","strict","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAUeA,EARD,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BC2DKC,6MA7DbC,MAAQ,CACNC,QAAS,KACTC,MAAO,GACPC,KAAM,MAGRC,cAAgB,SAAAC,GACdC,EAAKC,SAAS,CACZN,QAASI,EAAMG,OAAOC,MAAM,KAE1BJ,EAAMG,OAAOC,OAASJ,EAAMG,OAAOC,MAAM,IAC3CH,EAAKC,SAAS,CACZL,MAAOQ,IAAIC,gBAAgBN,EAAMG,OAAOC,MAAM,SAKpDG,UAAY,SAAAP,GACVC,EAAKC,SAAS,CACZJ,KAAME,EAAMG,OAAOK,WAIvBC,aAAe,SAAAT,GACbU,MAAM,2BAA6BT,EAAKN,MAAMG,MAC9CE,EAAMW,0FAIN,OACIpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMmB,SAAUC,KAAKJ,cACnBlB,EAAAC,EAAAC,cAAA,SAAOqB,QAAQ,WAAf,6BACAvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEsB,KAAK,OACLC,GAAG,UACHlB,KAAK,UACLmB,SAAUJ,KAAKd,iBAGnBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKuB,GAAG,SAASE,IAAKL,KAAKlB,MAAME,MAAOsB,IAAI,MAE9C5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOqB,QAAQ,QAAf,SAEEvB,EAAAC,EAAAC,cAAA,SACEsB,KAAK,OACLP,MAAOK,KAAKlB,MAAMG,KAClBmB,SAAUJ,KAAKN,cAIrBhB,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,SAASP,MAAM,oBAvDtBY,aCyBJC,mLAhBX,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,UAAT,WAGNlC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAOmC,KAAK,IAAIC,OAAK,EAACC,QAAM,EAACC,UAAWpC,IACxCH,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAOmC,KAAK,SAASC,OAAK,EAACC,QAAM,EAACC,UAAWzC,aAXrC+B,aCIEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80ca5d9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Child = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>About Page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Child;","import React , {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n      imgfile: null,\r\n      image: \"\",\r\n      name: \"\"\r\n    };\r\n  \r\n    onFileChanged = event => {\r\n      this.setState({\r\n        imgfile: event.target.files[0]\r\n      });\r\n      if (event.target.files && event.target.files[0]) {\r\n        this.setState({\r\n          image: URL.createObjectURL(event.target.files[0])\r\n        });\r\n      }\r\n    };\r\n  \r\n    inputName = event => {\r\n      this.setState({\r\n        name: event.target.value\r\n      });\r\n    };\r\n  \r\n    onFormSubmit = event => {\r\n      alert(\"Form was submitted by : \" + this.state.name);\r\n      event.preventDefault();\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n          <div>\r\n            <form onSubmit={this.onFormSubmit}>\r\n              <label htmlFor=\"imgfile\">Choose an image to upload</label>\r\n              <div>\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"imgfile\"\r\n                  name=\"imgfile\"\r\n                  onChange={this.onFileChanged}\r\n                />\r\n              </div>\r\n              <div>\r\n                <img id=\"target\" src={this.state.image} alt=\"\" />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"name\">\r\n                  Name :\r\n                  <input\r\n                    type=\"text\"\r\n                    value={this.state.name}\r\n                    onChange={this.inputName}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Form;","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport Route from \"react-router-dom/Route\";\nimport Child from './component/child';\nimport Form from './component/form'\n\nclass App extends Component {\n \n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <ul>\n            <li><Link to=\"/about\">About</Link></li>\n          </ul>\n\n          <Route path=\"/\" exact strict component={Form} />\n          <Route path=\"/about\" exact strict component={Child} />\n\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}